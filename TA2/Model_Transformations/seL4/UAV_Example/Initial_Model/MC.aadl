package MC
public
	with SW;
	with UAS_Buses;
	with CASE_Model_Transformations;
	with CASE_Properties;

	-- The radio communication hardware
	device Radio
		features
			MCA: requires bus access MC_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_out: out event data port;
	end Radio;

	device implementation Radio.Impl
	end Radio.Impl;

	-- The serial communication hardware
	device UART
		features
			MCA: requires bus access MC_Bus.Impl;
			UARTA: requires bus access UAS_Buses::Serial_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_out: out event data port;
	end UART;

	device implementation UART.Impl
	end UART.Impl;

	-- The Mission Computer processor
	processor MC_Proc
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Proc;

	processor implementation MC_Proc.Impl
		properties
			CASE_Properties::OS => "seL4";
	end MC_Proc.Impl;

	-- The Mission Computer RAM
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Mem;

	memory implementation MC_Mem.Impl
	end MC_Mem.Impl;

	-- The Mission Computer on-board bus
	bus MC_Bus
	end MC_Bus;

	bus implementation MC_Bus.Impl
	end MC_Bus.Impl;

	virtual processor CASE_Virtual_Machine
		properties
			CASE_Properties::Component_Type => VIRTUAL_MACHINE;
	end CASE_Virtual_Machine;

	virtual processor implementation CASE_Virtual_Machine.Impl
		properties
			CASE_Properties::OS => "Linux";
	end CASE_Virtual_Machine.Impl;

	-- The MissionComputer onboard the UAV
	system MissionComputer
		features
			radio_recv: in event data port;
			radio_send: out event data port;
			uart_recv: in event data port;
			uart_send: out event data port;
			UARTA: requires bus access UAS_Buses::Serial_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
	end MissionComputer;

	system implementation MissionComputer.Impl
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			SW: process SW::SW.Impl;
--			VM: virtual processor CASE_Virtual_Machine.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> SW.radio_recv;
			c3: port SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> SW.uart_recv;
			c7: port SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to SW;--, VM;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7;
--			Actual_Processor_Binding => (reference (VM)) applies to SW.UXAS;
	end MissionComputer.Impl;

end MC;