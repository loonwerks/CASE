package MC
public
	with SW;

	with UAS_Buses;

	with CASE_Model_Transformations;

	with CASE_Properties;

	-- The radio communication hardware
	device Radio
		features
			MCA: requires bus access MC_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_out: out event data port;
	end Radio;

	device implementation Radio.Impl
	end Radio.Impl;

		-- The serial communication hardware
	device UART
		features
			MCA: requires bus access MC_Bus.Impl;
			UARTA: requires bus access UAS_Buses::Serial_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_out: out event data port;
	end UART;

	device implementation UART.Impl
	end UART.Impl;

		-- The Wifi communication hardware
	device Wifi
		features
			MCA: requires bus access MC_Bus.Impl;
			WIFIA: requires bus access UAS_Buses::Wifi_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			send_data_out: out event data port;
	end Wifi;

	device implementation Wifi.Impl
	end Wifi.Impl;

		-- The Mission Computer processor
	processor MC_Proc
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Proc;

	processor implementation MC_Proc.Impl
	end MC_Proc.Impl;

		-- The Mission Computer RAM
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Mem;

	memory implementation MC_Mem.Impl
	end MC_Mem.Impl;

		-- The Mission Computer on-board bus
	bus MC_Bus
	end MC_Bus;

	bus implementation MC_Bus.Impl
	end MC_Bus.Impl;

	virtual processor CASE_Virtual_Machine
		properties
			CASE_Properties::Isolating => 100;
	end CASE_Virtual_Machine;

	virtual processor implementation CASE_Virtual_Machine.Impl
		properties
			CASE_Properties::OS => Linux;
	end CASE_Virtual_Machine.Impl;

		-- The MissionComputer onboard the UAV
	system MissionComputer
		features
			radio_recv: in event data port;
			radio_send: out event data port;
			uart_recv: in event data port;
			uart_send: out event data port;
			wifi_recv: in event data port;
			wifi_send: out event data port;
			UARTA: requires bus access UAS_Buses::Serial_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
			WIFIA: requires bus access UAS_Buses::Wifi_Bus.Impl;
	end MissionComputer;

	-- The Mission Computer implementation before the Virtualization model transformation is applied
	-- Resolute should fail
	system implementation MissionComputer.Init
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
		annex resolute {**
			prove Req001_SW_Init(this.PROC_SW)
		**};
	end MissionComputer.Init;
	
	
	-- The Mission Computer implementation after the Virtualization model transformation is applied
	-- Resolute should pass
	system implementation MissionComputer.Transformed
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW, VM;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
			Actual_Processor_Binding => (reference (VM)) applies to PROC_SW.FPLN;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {}, this.VM)
		**};
	end MissionComputer.Transformed;

	virtual processor CASE_Virtual_Machine_Test_1
	end CASE_Virtual_Machine_Test_1;

	virtual processor implementation CASE_Virtual_Machine_Test_1.Impl
		properties
			CASE_Properties::OS => Linux;
	end CASE_Virtual_Machine_Test_1.Impl;

	-- VM has no Component_Type property
	-- Resolute should fail
	system implementation MissionComputer.Test_VM_Bound_To_Processor_1
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine_Test_1.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW, VM;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
			Actual_Processor_Binding => (reference (VM)) applies to PROC_SW.FPLN;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {}, this.VM)
		**};
	end MissionComputer.Test_VM_Bound_To_Processor_1;
	
	-- Give VM a different Component_Type value
	-- Resolute should fail
	system implementation MissionComputer.Test_VM_Bound_To_Processor_2
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine_Test_1.Impl {CASE_Properties::Monitoring => 100;};
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW, VM;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
			Actual_Processor_Binding => (reference (VM)) applies to PROC_SW.FPLN;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {}, this.VM)
		**};
	end MissionComputer.Test_VM_Bound_To_Processor_2;
	
	-- VM is not bound to a processor
	-- Resolute should fail
	system implementation MissionComputer.Test_VM_Bound_To_Processor_3
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
			Actual_Processor_Binding => (reference (VM)) applies to PROC_SW.FPLN;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {}, this.VM)
		**};
	end MissionComputer.Test_VM_Bound_To_Processor_3;
	
	-- PROC_SW.FPLN is not bound to VM
	-- Resolute should fail
	system implementation MissionComputer.Test_Components_Bound_To_VM
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW::SW.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW, VM;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {}, this.VM)
		**};
	end MissionComputer.Test_Components_Bound_To_VM;
	
	thread FlightPlannerSubcomponent_Test
		features
			flight_plan: out data port SW::Mission;
			recv_map: in event data port SW::RF_Msg.Impl;
			request_nofly_zones: out event data port SW::Map;
			nofly_zones: in event data port SW::MapArray;
			position_status: in event data port SW::Coordinate.Impl;
	end FlightPlannerSubcomponent_Test;
	
	thread implementation FlightPlannerSubcomponent_Test.Impl
		
	end FlightPlannerSubcomponent_Test.Impl;
	
	thread group FlightPlanner_Test
		features
			flight_plan: out data port SW::Mission;
			recv_map: in event data port SW::RF_Msg.Impl;
			request_nofly_zones: out event data port SW::Map;
			nofly_zones: in event data port SW::MapArray;
			position_status: in event data port SW::Coordinate.Impl;
	end FlightPlanner_test;

	thread group implementation FlightPlanner_Test.Impl
		subcomponents
			FP_SUB: thread FlightPlannerSubcomponent_Test.Impl;
		connections
			c1: port FP_SUB.flight_plan -> flight_plan;
			c2: port recv_map -> FP_SUB.recv_map;
			c3: port FP_SUB.request_nofly_zones -> request_nofly_zones;
			c4: port nofly_zones -> FP_SUB.nofly_zones;
			c5: port position_status -> FP_SUB.position_status;
	end FlightPlanner_Test.Impl;
	
	process SW_Test
		-- The Mission Computer Software process runs all threads
		features
			radio_recv: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			radio_send: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			uart_recv: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			uart_send: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			wifi_recv: in event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
			wifi_send: out event data port CASE_Model_Transformations::CASE_WIFI_Msg.Impl;
	end SW_Test;

	process implementation SW_Test.Impl
		subcomponents
			RADIO: thread SW::RadioDriver.Impl;
			FPLN: thread group FlightPlanner_Test.Impl;
			WPM: thread SW::WaypointManager.Impl;
			CM: thread SW::CameraManager.Impl;
			UART: thread SW::UARTDriver.Impl;
			WIFI: thread SW::WifiDriver.Impl;
			NFDB: thread SW::NoFlyZoneDatabase.Impl;
		connections
			c1: port radio_recv -> RADIO.recv_data;
			c2: port RADIO.send_data -> radio_send;
			c3: port RADIO.mission_command -> FPLN.recv_map;
			c5: port FPLN.flight_plan -> WPM.flight_plan;
			c6: port FPLN.request_nofly_zones -> NFDB.map;
			c7: port NFDB.zones -> FPLN.nofly_zones;
			c8: port WPM.mission_window -> UART.mission_window;
			c9: port UART.status -> WPM.position_status;
			c10: port UART.status -> FPLN.position_status;
			c11: port UART.status -> RADIO.status;
			c12: port UART.send_data -> uart_send;
			c13: port uart_recv -> UART.recv_data;
			c14: port FPLN.flight_plan -> CM.flight_plan;
			c15: port UART.status -> CM.position_status;
			c16: port CM.gimbal_command -> WIFI.gimbal_command;
			c17: port WIFI.send_data -> wifi_send;
			c18: port wifi_recv -> WIFI.recv_data;
	end SW_Test.Impl;
	
	-- FPLN is modified to be a thread group with thread subcomponents that are not bound to the VM
	-- Resolute should fail
	system implementation MissionComputer.Test_Subcomponents_Not_Bound_To_Other_Processors
		subcomponents
			RADIO_HW: device Radio.Impl;
			UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: process SW_Test.Impl;
			WIFI_HW: device Wifi.Impl;
			VM: virtual processor CASE_Virtual_Machine.Impl;
		connections
			c1: port radio_recv -> RADIO_HW.recv_data_in;
			c2: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c3: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c4: port RADIO_HW.send_data_out -> radio_send;
			c5: port uart_recv -> UART_HW.recv_data_in;
			c6: port UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c7: port PROC_SW.uart_send -> UART_HW.send_data_in;
			c8: port UART_HW.send_data_out -> uart_send;
			c9: port wifi_recv -> WIFI_HW.recv_data_in;
			c10: port WIFI_HW.recv_data_out -> PROC_SW.wifi_recv;
			c11: port PROC_SW.wifi_send -> WIFI_HW.send_data_in;
			c12: port WIFI_HW.send_data_out -> wifi_send;
			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;
			bac5: bus access WIFI_HW.MCA <-> BUS_HW;
			bac6: bus access RADIO_HW.RFA <-> RFA;
			bac7: bus access UART_HW.UARTA <-> UARTA;
			bac8: bus access WIFI_HW.WIFIA <-> WIFIA;
		properties
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW, VM, PROC_SW.FPLN.FP_SUB;
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c2, c3, c6, c7, c10, c11;
			Actual_Processor_Binding => (reference (VM)) applies to PROC_SW.FPLN;
		annex resolute {**
			prove Req001_SW_Transformed(this.PROC_SW, {this.PROC_SW.FPLN}, {this.PROC_SW.FPLN.FP_SUB}, this.VM)
		**};
	end MissionComputer.Test_Subcomponents_Not_Bound_To_Other_Processors;

end MC;