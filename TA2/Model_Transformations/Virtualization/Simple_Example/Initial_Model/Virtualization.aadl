package Virtualization
public
	
	with CASE_Properties;
	
	processor HW_Proc
	end HW_Proc;
	
	processor implementation HW_Proc.Impl
		properties
			CASE_Properties::OS => sel4;
	end HW_Proc.Impl;
	
	process SW
	end SW;
	
	process implementation SW.Impl
		subcomponents
			A: thread Comp_A.Impl;
			B: thread Comp_B.Impl;
			C: thread Comp_C.Impl;
		connections
			c1: port A.output -> B.input {CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;};
			c2: port B.output -> C.input {CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;};
	end SW.Impl;
	
	thread Comp_A
		features
			output: out event data port;
		properties
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
	end Comp_A;
	
	thread implementation Comp_A.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Comp_A.c");
	end Comp_A.Impl;
	
	thread Comp_B
		features
			input: in event data port;
			output: out event data port;
		properties
			CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;
	end Comp_B;
	
	thread implementation Comp_B.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Comp_B.c");
	end Comp_B.Impl;
	
	thread Comp_C
		features
			input: in event data port;
		properties
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
	end Comp_C;
	
	thread implementation Comp_C.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Comp_C.c");
	end Comp_C.Impl;
	
	system Critical
	end Critical;
	
	system implementation Critical.Impl
		subcomponents
			PROC : processor HW_Proc.Impl;
			SW : process SW.Impl;
		properties
			Actual_Processor_Binding => (reference (PROC)) applies to SW;
		annex resolute {**
			prove(Req_Virtualization(this.SW))
		**};
	end Critical.Impl;
	
end Virtualization;