include "../Vale.Lib.Basic.vaf"
include "../../../arch/x64/Vale.X64.InsBasic.vaf"
include{:fstar}{:open} "Vale.Arch.TypesNative"

module Vale.Lib.X64.Cpuid

#verbatim{:interface}{:implementation}
open Vale.Def.Types_s
open Vale.Arch.Types
open Vale.X64.Machine_s
open Vale.X64.Memory
open Vale.X64.State
open Vale.X64.Decls
open Vale.X64.InsBasic
open Vale.X64.QuickCode
open Vale.X64.QuickCodes
open Vale.X64.CPU_Features_s

//let pow2_values (u:unit) : Lemma
//  (pow2 29 == 0x20000000 /\
//   pow2 25 == 0x2000000 /\
//   pow2  1 == 0x2)
//  =
//  assert_norm (pow2 29 == 0x20000000);
//  assert_norm (0x2000000 == pow2 25);
//  assert_norm (0x2 == pow2 1);
//  ()
#endverbatim

#verbatim{:implementation}
open Vale.Lib.Basic
#endverbatim

procedure Check_aesni_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> aesni_enabled && pclmulqdq_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rcx, 0);      // Dummy for taint analysis
    Mov64(rax, 1);
    Cpuid_AES();
    lemma_iand_pow2_64(rcx, 25); // ==> rcx & pow2(25) == 0 or pow2(25)
    lemma_iand_pow2_64(rcx, 1);  // ==> rcx & pow2( 1) == 0 or pow2(1)
    Mov64(rax, rcx);
    And64(rax, 0x2000000);
    assert_normalize(0x2000000 == pow2(25));
    assert_normalize(0x2 == pow2(1));

    Shr64(rax, 24);
    lemma_ishr_pow2_diff64(1, 25); // ==> shr(pow2(25), 24) == pow2(1)
    lemma_ishr_zero64(24);         // ==> shr(0, 24) == 0

    And64(rcx, 0x2);
    lemma_iand_maybe_pow2_64(rax, rcx, 1); // Post condition
    And64(rax, rcx);
//    assert rax != 0 ==> pclmulqdq_enabled;
//    assert rax != 0 ==> aesni_enabled;
//    assert !aesni_enabled ==> rax == 0;
//    assert !pclmulqdq_enabled ==> rax == 0;

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_sha_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> sha_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rax, 7);
    Mov64(rcx, 0);
    Cpuid_Sha();
    lemma_iand_pow2_64(rbx, 29);
    And64(rbx,0x20000000);
    assert_normalize(0x20000000 == pow2(29));
    Mov64(rax, rbx);

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_adx_bmi2_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> adx_enabled && bmi2_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rax, 7);
    Mov64(rcx, 0);
    Cpuid_Adx_Bmi2();
    lemma_iand_pow2_64(rbx, 8);
    lemma_iand_pow2_64(rbx, 19);
    Mov64(rax, rbx);    // Save a copy

    And64(rax, 0x80000);

    assert_normalize(0x100 == pow2(8));
    assert_normalize(0x80000 == pow2(19));

    Shr64(rax, 11);
    lemma_ishr_pow2_diff64(8, 19); // ==> shr(pow2(19), 11) == pow2(8)
    lemma_ishr_zero64(11);         // ==> shr(0, 11) == 0

    And64(rbx, 0x100);
    lemma_iand_maybe_pow2_64(rax, rbx, 8); // Post condition
    And64(rax, rbx);

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_avx_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> avx_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rcx, 0);      // Dummy for taint analysis
    Mov64(rax, 1);
    Cpuid_Avx();
    lemma_iand_pow2_64(rcx, 25); // ==> rcx & pow2(25) == 0 or pow2(25)
    Mov64(rax, rcx);
    And64(rax, 0x10000000);
    assert_normalize(0x10000000 == pow2(28));

    Shr64(rax, 27);
    lemma_ishr_pow2_diff64(1, 28); // ==> shr(pow2(25), 24) == pow2(1)
    lemma_ishr_zero64(27);         // ==> shr(0, 24) == 0

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_avx2_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> avx2_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rax, 7);
    Mov64(rcx, 0);
    Cpuid_Avx2();
    lemma_iand_pow2_64(rbx, 5);
    And64(rbx,0x20);
    assert_normalize(0x20 == pow2(5));
    Mov64(rax, rbx);

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_movbe_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> movbe_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rcx, 0);      // Dummy for taint analysis
    Mov64(rax, 1);
    Cpuid_Movbe();
    lemma_iand_pow2_64(rcx, 22); // ==> rcx & pow2(22) == 0 or pow2(22)
    Mov64(rax, rcx);
    And64(rax, 0x400000);
    assert_normalize(0x400000 == pow2(22));

    Shr64(rax, 21);
    lemma_ishr_pow2_diff64(1, 22); // ==> shr(pow2(22), 21) == pow2(1)
    lemma_ishr_zero64(21);         // ==> shr(0, 22) == 0

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_sse_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> sse_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rcx, 0);      // Dummy for taint analysis
    Mov64(rax, 1);
    Cpuid_Sse();

    // SSSE3
    Mov64(rax, rcx);

    lemma_iand_pow2_64(rcx, 9); // ==> rcx & pow2(9) == 0 or pow2(9)
    lemma_iand_pow2_64(rdx, 26); // ==> rdx & pow2(26) == 0 or pow2(26)
    lemma_iand_pow2_64(rax, 19); // ==> rcx & pow2(19) == 0 or pow2(19)

    And64(rax, 0x80000);
    And64(rcx, 0x200);
    And64(rdx, 0x4000000);

    assert_normalize(0x200 == pow2(9));
    assert_normalize(0x80000 == pow2(19));
    assert_normalize(0x4000000 == pow2(26));

    Shr64(rax, 10);
    lemma_ishr_pow2_diff64(9, 19); // ==> shr(pow2(19), 10) == pow2(9)
    lemma_ishr_zero64(10);         // ==> shr(0, 10) == 0;

    Shr64(rdx, 17);
    lemma_ishr_pow2_diff64(9, 26); // ==> shr(pow2(26), 17) == pow2(9)
    lemma_ishr_zero64(17);         // ==> shr(0, 17) == 0;
 
    lemma_iand_maybe_pow2_64(rax, rdx, 9);
    lemma_iand_pow2_64(rax, 9);
    And64(rax, rdx);
    lemma_iand_maybe_pow2_64(rax, rcx, 9);
    And64(rax, rcx);
  
    Mov64(rbx, r9);        // Callee-restore
}

procedure Check_rdrand_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; efl;
    ensures
        rax != 0 ==> rdrand_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rcx, 0);      // Dummy for taint analysis
    Mov64(rax, 1);
    Cpuid_Rdrand();
    lemma_iand_pow2_64(rcx, 30); // ==> rcx & pow2(30) == 0 or pow2(30)
    Mov64(rax, rcx);
    And64(rax, 0x40000000);
    assert_normalize(0x40000000 == pow2(30));

    Shr64(rax, 29);
    lemma_ishr_pow2_diff64(1, 30); // ==> shr(pow2(30), 29) == pow2(1)
    lemma_ishr_zero64(29);         // ==> shr(0, 30) == 0

    Mov64(rbx, r9);     // Callee-restore
}

procedure Check_avx512_support()
    {:public}
    {:quick}
    modifies rax; rbx; rcx; rdx; r9; r10; r11; efl;
    ensures
        rax != 0 ==> avx512_enabled;
        rbx == old(rbx);
{
    Mov64(r9, rbx);     // Callee-save

    Mov64(rax, 7);
    Mov64(rcx, 0);
    Cpuid_Avx512();
    lemma_iand_pow2_64(rbx, 16);
    lemma_iand_pow2_64(rbx, 17);
    lemma_iand_pow2_64(rbx, 30);
    lemma_iand_pow2_64(rbx, 31);

    // Save copies
    Mov64(rax, rbx);
    Mov64(r10, rbx);
    Mov64(r11, rbx);

    And64(rbx, 0x10000);
    And64(rax, 0x20000);
    And64(r10, 0x40000000);

    assert_normalize(0x10000 == pow2(16));
    assert_normalize(0x20000 == pow2(17));
    assert_normalize(0x40000000 == pow2(30));
    assert_normalize(0x80000000 == pow2(31));

    Shr64(rax, 1);
    lemma_ishr_pow2_diff64(16, 17); // ==> shr(pow2(17), 1) == pow2(16)
    lemma_ishr_zero64(1);         // ==> shr(0, 1) == 0

    Shr64(r10, 14);
    lemma_ishr_pow2_diff64(16, 30); // ==> shr(pow2(30), 14) == pow2(16)
    lemma_ishr_zero64(14);         // ==> shr(0, 14) == 0

    lemma_iand_maybe_pow2_64(rax, rbx, 16); // Post condition
    lemma_iand_pow2_64(rax, 16);
    And64(rax, rbx);

    // Need to move 2**31 to a register, as it is out of range of imm32 to be used in AND directly
    Mov64(rbx, 0x80000000);
    And64(r11, rbx);
    Shr64(r11, 15);
    lemma_ishr_pow2_diff64(16, 31); // ==> shr(pow2(31), 15) == pow2(16)
    lemma_ishr_zero64(15);         // ==> shr(0, 15) == 0

    lemma_iand_maybe_pow2_64(rax, r10, 16); // Post condition
    And64(rax, r10);
    lemma_iand_maybe_pow2_64(rax, r11, 16); // Post condition
    And64(rax, r11);

    Mov64(rbx, r9);     // Callee-restore
}

