package Attestation
public
	with CASE_Model_Transformations;

	with CASE_Properties;

	with Base_Types;

	thread RadioDriver
		features
			recv_message: in event data port;
			command_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			other_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		flows
			flow_1: flow path recv_message -> command_message;
		properties
			CASE_Properties::Component_Type => COMM_DRIVER;
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
			Source_Text => ("RadioDriver.c");
	end RadioDriver.Impl;

	thread Critical_A
		features
			recv_command: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			status: out event data port Base_types::Boolean;
		flows
			flow_1: flow path recv_command -> status;
		properties
			 CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 100;
		annex agree {**
			assume Req_Trusted "Command messages shall only come from trusted sources" : recv_command.header.trusted;
			guarantee "Critical component status shall never be false" : status;
		**};
	end Critical_A;

	thread implementation Critical_A.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Critical_A.c");
	end Critical_A.Impl;
	
	thread Critical_B
		features
			recv_message: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			 CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 100;
	end Critical_B;

	thread implementation Critical_B.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Critical_B.c");
	end Critical_B.Impl;

	process SW
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		flows
--			sink_1: flow sink input;
--			source_1: flow source output;
			flow_1: flow path input -> output;
		properties
			 CASE_Properties::Trust_Level => 0; -- would prefer to say "unknown"
			 CASE_Properties::Control_Level => 100;
		annex agree {**
			guarantee "Output status shall never be false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			RADIO: thread RadioDriver.Impl;
			CRIT_A: thread Critical_A.Impl;
			CRIT_B: thread Critical_B.Impl;
		connections
			c1: port input -> RADIO.recv_message {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c2: port RADIO.command_message -> CRIT_A.recv_command {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 100;};
			c3: port RADIO.other_message -> CRIT_B.recv_message {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 100;};
			c4: port CRIT_A.status -> output {CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 100;};
		flows
			flow_1: flow path input -> c1 -> RADIO.flow_1 -> c2 -> CRIT_A.flow_1 -> c4 -> output;
	end SW.Impl;
	
	processor Proc
		properties
			CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 0;
 	end Proc;

	processor implementation Proc.Impl
		properties
			CASE_Properties::OS => "Linux";
	end Proc.Impl;
	
	system Sys
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		flows
			flow_1: flow path input -> output;
		properties
			 CASE_Properties::Trust_Level => 0; -- would prefer to say "unknown"
			 CASE_Properties::Control_Level => 100;
	end Sys;
	
	system implementation Sys.Impl
		subcomponents
			SW: process SW.Impl;
			PROC: processor Proc.Impl;
		connections
			c1: port input -> SW.input {CASE_Properties::Trust_Level => 0; CASE_Properties::Control_Level => 0;};
			c2: port SW.output -> output {CASE_Properties::Trust_Level => 100; CASE_Properties::Control_Level => 100;};
		flows
			flow_1: flow path input -> c1 -> SW.flow_1 -> c2 -> output;
		properties
			Actual_Processor_Binding => (reference (PROC)) applies to SW;
	end Sys.Impl;
	
end Attestation;