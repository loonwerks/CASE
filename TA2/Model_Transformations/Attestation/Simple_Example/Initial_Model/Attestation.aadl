package Attestation
public
	with CASE_Model_Transformations;
	with CASE_Properties;
	with Base_Types;

	data Address
	end Address;

	data implementation Address.Impl
		subcomponents
			value: data Base_Types::Integer[4];
	end Address.Impl;

	thread RadioDriver
		features
			recv_message: in event data port;
			command_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			other_message: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
		properties
			CASE_Properties::Comm_Driver => true;
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Periodic;
			Source_Text => ("RadioDriver.c");
	end RadioDriver.Impl;

	thread Critical_A
		features
			recv_command: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			status: out event data port Base_types::Boolean;
		annex agree {**
			assume Req_Trusted "Command messages shall only come from trusted sources" : recv_command.header.trusted;
			guarantee "Critical component status shall never be false" : status;
		**};
	end Critical_A;

	thread implementation Critical_A.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Critical_A.c");
	end Critical_A.Impl;

	thread Critical_B
		features
			recv_message: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
	end Critical_B;

	thread implementation Critical_B.Impl
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("Critical_B.c");
	end Critical_B.Impl;

	process SW
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
		annex agree {**
			guarantee "Output status shall never be false" : output;
		**};
	end SW;

	process implementation SW.Impl
		subcomponents
			Radio: thread RadioDriver.Impl;
			Crit_A: thread Critical_A.Impl;
			Crit_B: thread Critical_B.Impl;
		connections
			c1: port input -> Radio.recv_message;
			c2: port Radio.command_message -> Crit_A.recv_command;
			c3: port Radio.other_message -> Crit_B.recv_message;
			c4: port Crit_A.status -> output;
		annex resolute {**
			prove(Req_Attestation(this.Radio))
		**};
	end SW.Impl;

	processor Proc
	end Proc;

	processor implementation Proc.Impl
		properties
			CASE_Properties::OS => Linux;
	end Proc.Impl;

	system Sys
		features
			input: in event data port;
			output: out event data port Base_Types::Boolean;
	end Sys;

	system implementation Sys.Impl
		subcomponents
			SW: process SW.Impl;
			PROC: processor Proc.Impl;
		connections
			c1: port input -> SW.input;
			c2: port SW.output -> output;
		properties
			Actual_Processor_Binding => (reference (PROC)) applies to SW;
	end Sys.Impl;
	
end Attestation;