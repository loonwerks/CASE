package CASE_AttestationGate
public
	with CMASI;
	renames CMASI::all;
	renames AGREE_PLTL::all;
	with CASE_Scheduling;
	with CASE_Properties;
	
	----------------------
	-- Attestation Gate --
	----------------------

	thread CASE_AttestationGate_thr
		features
			trusted_ids: in data port CMASI::AddressArray.i;
			AutomationRequest_in: in event data port CMASI::AddressAttributedMessage.i;
			AutomationRequest_out: out event data port CMASI::AutomationRequest.i;
			OperatingRegion_in: in event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion_out: out event data port CMASI::OperatingRegion.i;
			LineSearchTask_in: in event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask_out: out event data port CMASI::LineSearchTask.i;
		properties
			--CASE_Properties::Component_Type => MONITOR;
			CASE_Properties::Component_Language => CakeML;
			CASE_Properties::Component_Spec => ("CASE_AttestationGate_policy");
			Dispatch_Protocol => Periodic;
			Period => 500ms;
			Compute_Execution_Time => 2ms .. 2ms;
            Stack_Size => CM_Property_Set::Stack_Size;
		annex agree {**
			fun IS_TRUSTED(src_id : CMASI::Address.i) : bool = exists id in trusted_ids.value, id = src_id;
			guarantee CASE_AttestationGate_policy "Only messages from trusted sources shall be forwarded" :
				if event(AutomationRequest_in) and IS_TRUSTED(AutomationRequest_in.id) then event(AutomationRequest_out) and not (event(OperatingRegion_out) or event(LineSearchTask_out)) and AutomationRequest_out = AutomationRequest_in.payload.AutomationRequest
				else if event(OperatingRegion_in) and IS_TRUSTED(OperatingRegion_in.id) then event(OperatingRegion_out) and not (event(AutomationRequest_out) or event(LineSearchTask_out)) and OperatingRegion_out = OperatingRegion_in.payload.OperatingRegion
				else if event(LineSearchTask_in) and IS_TRUSTED(LineSearchTask_in.id) then event(LineSearchTask_out) and not (event(AutomationRequest_out) or event(OperatingRegion_out)) and LineSearchTask_out = LineSearchTask_in.payload.LineSearchTask
				else not (event(AutomationRequest_out) or event(OperatingRegion_out) or event(LineSearchTask_out));
				-- else not (event(AutomationRequest_out));
		**};
	end CASE_AttestationGate_thr;

	thread implementation CASE_AttestationGate_thr.Impl
		properties
			Dispatch_Protocol => Periodic;
	end CASE_AttestationGate_thr.Impl;
	
	process CASE_AttestationGate
		features
			trusted_ids: in data port CMASI::AddressArray.i;
			AutomationRequest_in: in event data port CMASI::AddressAttributedMessage.i;
			AutomationRequest_out: out event data port CMASI::AutomationRequest.i;
			OperatingRegion_in: in event data port CMASI::AddressAttributedMessage.i;
			OperatingRegion_out: out event data port CMASI::OperatingRegion.i;
			LineSearchTask_in: in event data port CMASI::AddressAttributedMessage.i;
			LineSearchTask_out: out event data port CMASI::LineSearchTask.i;
		properties
			CASE_Scheduling::Domain => CM_Property_Set::AM_Gate_Domain;
	end CASE_AttestationGate;
	
	process implementation CASE_AttestationGate.Impl
		subcomponents
			CASE_AttestationGate: thread CASE_AttestationGate_thr.Impl;
		connections
			c1: port trusted_ids -> CASE_AttestationGate.trusted_ids;
			c2: port AutomationRequest_in -> CASE_AttestationGate.AutomationRequest_in;
			c3: port CASE_AttestationGate.AutomationRequest_out -> AutomationRequest_out;
			c4: port OperatingRegion_in -> CASE_AttestationGate.OperatingRegion_in;
			c5: port CASE_AttestationGate.OperatingRegion_out -> OperatingRegion_out;
			c6: port LineSearchTask_in -> CASE_AttestationGate.LineSearchTask_in;
			c7: port CASE_AttestationGate.LineSearchTask_out -> LineSearchTask_out;
	end CASE_AttestationGate.Impl;

end CASE_AttestationGate;
