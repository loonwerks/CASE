package MC
public

	with UAS_Buses;
	with HAMR;
	with SW;
	with CASE_Properties;
	with CASE_Scheduling;
	with CASE_Model_Transformations;

	-- The radio communication hardware
	device Radio
		features
			MCA: requires bus access MC_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_RF_Msg.Impl;
			send_data_out: out event data port;
	end Radio;

	device implementation Radio.Impl
	end Radio.Impl;

	-- The serial communication hardware
	device UART
		features
			MCA: requires bus access MC_Bus.Impl;
			UART: requires bus access UAS_Buses::Serial_Bus.Impl;
			recv_data_in: in event data port;
			recv_data_out: out event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_in: in event data port CASE_Model_Transformations::CASE_UART_Msg.Impl;
			send_data_out: out event data port;
	end UART;

	device implementation UART.Impl
	end UART.Impl;

	-- The Mission Computer processor
	processor MC_Proc
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Proc;

	processor implementation MC_Proc.Impl
		properties
   		Frame_Period => 1000ms;
      	Clock_Period => 2ms;
      	CASE_Scheduling::Max_Domain => 15;
   		CASE_Scheduling::Schedule_Source_Text => "kernel/domain_schedule.c";
	end MC_Proc.Impl;

	-- The Mission Computer RAM
	memory MC_Mem
		features
			MCA: requires bus access MC_Bus.Impl;
	end MC_Mem;

	memory implementation MC_Mem.Impl
	end MC_Mem.Impl;

	-- The Mission Computer on-board bus
	bus MC_Bus
	end MC_Bus;

	bus implementation MC_Bus.Impl
	end MC_Bus.Impl;

	virtual processor CASE_Virtual_Machine
		--properties
		--	CASE_Properties::Component_Type => VIRTUAL_MACHINE;
	end CASE_Virtual_Machine;

	virtual processor implementation CASE_Virtual_Machine.Radio
		--properties
		--	CASE_Properties::OS => "Linux";
	end CASE_Virtual_Machine.Radio;
	
	virtual processor implementation CASE_Virtual_Machine.UxAS
		--properties
		--	CASE_Properties::OS => "Linux";
	end CASE_Virtual_Machine.UxAS;

	-- The MissionComputer on-board the UAV
	system MissionComputer

		features
			radio_recv: in event data port;
			radio_send: out event data port;
			fc_uart_recv: in event data port;
			fc_uart_send: out event data port;
			FC_UART: requires bus access UAS_Buses::Serial_Bus.Impl;
			RFA: requires bus access UAS_Buses::RF_Bus.Impl;

	end MissionComputer;

	system implementation MissionComputer.Impl

		subcomponents
			RADIO_HW: device Radio.Impl;
			FC_UART_HW: device UART.Impl;
			PROC_HW: processor MC_Proc.Impl;
			MEM_HW: memory MC_Mem.Impl;
			BUS_HW: bus MC_Bus.Impl;
			PROC_SW: system SW::SW.Impl;
			VM_Radio: virtual processor CASE_Virtual_Machine.Radio;
			VM_UxAS: virtual processor CASE_Virtual_Machine.UxAS;
		connections

			-- MissionComputer
			c01: port radio_recv -> RADIO_HW.recv_data_in;
			c02: port fc_uart_recv -> FC_UART_HW.recv_data_in;

			-- RADIO_HW
			c04: port RADIO_HW.recv_data_out -> PROC_SW.radio_recv;
			c05: port RADIO_HW.send_data_out -> radio_send;

			-- FC_UART_HW
			c06: port FC_UART_HW.recv_data_out -> PROC_SW.uart_recv;
			c07: port FC_UART_HW.send_data_out -> fc_uart_send;

			-- PROC_SW    
			c10: port PROC_SW.radio_send -> RADIO_HW.send_data_in;
			c11: port PROC_SW.uart_send -> FC_UART_HW.send_data_in;

			bac1: bus access RADIO_HW.MCA <-> BUS_HW;
			bac2: bus access FC_UART_HW.MCA <-> BUS_HW;
			bac3: bus access PROC_HW.MCA <-> BUS_HW;
			bac4: bus access MEM_HW.MCA <-> BUS_HW;

			-- RFA
			bac5: bus access RADIO_HW.RFA <-> RFA;

			-- UART
			bac6: bus access FC_UART_HW.UART <-> FC_UART;
		properties
			Actual_Memory_Binding => (reference (MEM_HW)) applies to PROC_SW;
			Actual_Connection_Binding => (reference (BUS_HW)) applies to c04, c06, c10, c11;
			Actual_Processor_Binding => (reference (PROC_HW)) applies to VM_UxAS, VM_RADIO;
			Actual_Processor_Binding => (reference (PROC_HW)) applies to PROC_SW.FC_UART, PROC_SW.FlyZones, PROC_SW.WPM, PROC_SW.AM_Gate, PROC_SW.FLT_LST, PROC_SW.MON_GEO, PROC_SW.MON_REQ;
			Actual_Processor_Binding => (reference (VM_UxAS)) applies to PROC_SW.UXAS;
			Actual_Processor_Binding => (reference (VM_Radio)) applies to PROC_SW.RADIO;
			
			
			HAMR::Default_Bit_Width => 32;
            HAMR::Default_Max_Sequence_Size => 1;
            HAMR::Max_String_Size => 256;
            HAMR::Bit_Codec_Raw_Connections => true;
            
        annex resolute {**
            check HAMR_Guidelines
        **};
             
	end MissionComputer.Impl;
	
end MC;