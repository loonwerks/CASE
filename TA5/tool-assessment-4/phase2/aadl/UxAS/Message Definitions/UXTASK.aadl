---------------------------------------------------------------------------------------------
-- This MDM defines the interface for stand-alone (possibly external) tasks managed by UxAS.
---------------------------------------------------------------------------------------------
package UXTASK
public
	with CMASI;
	with Base_Types; renames Base_Types::all;
	with Data_Model;
	
	--The state of an entity to be used as the initial planning state when
	--constructing assignments/plans.
	data PlanningState
	end PlanningState;
	
	data implementation PlanningState.i
	    subcomponents
	        --Identifier of the entity
	        EntityID: data Integer_64;
	        --Initial position of this entity for the plan
	        PlanningPosition: data CMASI::Location3D.i;
	        --Initial heading of this entity for the plan
	        PlanningHeading: data Float_32;
	end PlanningState.i;

	--Patches CMASI automation request to add a unique identifier
	data PlanningStateArray
    properties
            Data_Model::Data_Representation => Array;
            Data_Model::Base_Type => (classifier (PlanningState.i));
            Data_Model::Dimension => (1);    
    end PlanningStateArray;
    
	data UniqueAutomationRequest		
	end UniqueAutomationRequest;

	data implementation UniqueAutomationRequest.i
	    subcomponents
	        --Identifier for tracking requests and responses
	        RequestID: data Integer_64;
	        --Original automation request without a unique identifier
	        OriginalRequest: data CMASI::AutomationRequest.i;
	        --If this boolean is true, then the resulting plans based on this
	        --automation request will not be directly implemented, for example,
	        --tasks should not expect the waypoints generated for this request to be
	        --active
	        SandBoxRequest: data Boolean;
	        --The initial states of entities used in planning. Note: if an
	        --eligible entity does not have a PlanningState, then it's most recent
	        --EntityState is used for plannning.
	        PlanningStates: data PlanningStateArray;
	end UniqueAutomationRequest.i;

	--Patches CMASI automation response to add a unique identifier
	data UniqueAutomationResponse		
	end UniqueAutomationResponse;
	
	data implementation UniqueAutomationResponse.i
	    subcomponents
	        --Identifier for tracking requests and responses. Must match RequestID
	        --from corresponding UniqueAutomationRequest
	        ResponseID: data Integer_64;
	        --Original automation request without a unique identifier
	        OriginalResponse: data CMASI::AutomationResponse.i;
	end UniqueAutomationResponse.i;

	--Representation of the assignment of entities to a task
	data TaskAssignment
	end TaskAssignment;
	
	data implementation TaskAssignment.i
	    subcomponents
	        --Task ID
	        TaskID: data Integer_64;
	        --Option ID that was selected for this task
	        OptionID: data Integer_64;
	        --Vehicle that is assigned to this task
	        AssignedVehicle: data Integer_64;
	        --Time before which this task cannot begin
	        TimeThreshold: data Integer_64;
	        --Time that this task is assigned to be completed.
	        TimeTaskCompleted: data Integer_64;
	end TaskAssignment.i;

	--A completed assignment consisting of an <b>ordered</b> list of tasks
	data TaskAssignmentSummary
	end TaskAssignmentSummary;	
	
	data implementation TaskAssignmentSummary.i
	    subcomponents
	        --ID that matches this summary with the appropriate unique automation
	        --request
	        CorrespondingAutomationRequestID: data Integer_64;
	        --Operating region which was considered during this assignment
	        OperatingRegion: data Integer_64;
	        --Ordered list of tasks to be completed
	        TaskList: data TaskAssignment.i {Data_Model::Data_Representation => Array;};
	        -- ADDED: BDR (20170808)
	        -- Size of the TaskList (not necessary if AGREE can get array size)
	        TaskListSize : data Integer_64;
	end TaskAssignmentSummary.i;

	--Request to generate waypoints enroute to the task as well as to
	--complete a task. From a given start position and heading, a task must
	--plan enroute waypoints to reach the task and then append task
	--waypoints for computing the task and then report final position and
	--heading of the vehicle.
	data TaskImplementationRequest
	end TaskImplementationRequest;

	data implementation TaskImplementationRequest.i
	    subcomponents
	        --Request ID for correlating to matching response
	        RequestID: data Integer_64;
	        
	        CorrespondingAutomationRequestID: data Integer_64;
	        
	        --Starting waypoint ID that task must use when building response. Note
	        --that Plan Builder reserves all values greater than 1,000,000,000.
	        --Therefore all *internal* task waypoints must be less than 1e9 and can
	        --be obtained from the reported waypoint number by
	        --"waypoint->getNumber()%1e9" .
	        StartingWaypointID: data Integer_64;
	        --Assigned vehicle ID
	        VehicleID: data Integer_64;
	        --Initial position of entity before task
	        StartPosition: data CMASI::Location3D.i;
	        --Initial heading of entity before task
	        StartHeading: data Float_32;
	        --Time when vehicle is at the starting location
	        StartTime: data Integer_64;
	        --ID for full region in which entity should plan
	        RegionID: data Integer_64;
	        --Task ID to be completed
	        TaskID: data Integer_64;
	        --Using option ID to complete this task
	        OptionID: data Integer_64;
	        --Time before which this task cannot begin
	        TimeThreshold: data Integer_64;
	end TaskImplementationRequest.i;

	--Response to a final task implementation request (one for each
	--vehicle assigned). Note that in addition to calculating task waypoints
	--that achieve that task purpose, a task implementation also includes
	--the enroute waypoints to get the vehicle(s) to that task to be
	--completed. Finally, an ending position and heading for the vehicle is
	--reported so that the next task in order will have a valid start
	--position and heading.
	data TaskImplementationResponse
	end TaskImplementationResponse;

	data implementation TaskImplementationResponse.i
	    subcomponents
	        --Response ID that matches the initial request
	        ResponseID: data Integer_64;
	        
	        --NOTE: new, Derek told me so
	        CorrespondingAutomationRequestID: data Integer_64;
	        
	        --Task ID
	        TaskID: data Integer_64;
	        --Option ID that was selected for this task
	        OptionID: data Integer_64;
	        --Vehicle ID
	        VehicleID: data Integer_64;
	        --Waypoints that implement this task for the indicated vehicle
	        TaskWaypoints: data CMASI::Waypoint.i {Data_Model::Data_Representation => Array;};
	        --Vehicle location when this task is complete
	        FinalLocation: data CMASI::Location3D.i;
	        --Vehicle heading when this task is complete
	        FinalHeading: data Float_32;
	        --Time when vehicle is at the final location
	        FinalTime: data Integer_64;
	end TaskImplementationResponse.i;

	--Task initialized message indicating that the corresponding task
	--service is available for use in automation requests		
	data TaskInitialized		
	end TaskInitialized;
	data implementation TaskInitialized.i
	    subcomponents
	        --Task ID is initialized and ready for use in automation requests
	        TaskID: data Integer_64;
	end TaskInitialized.i;	

	data TaskActive		
	end TaskActive;
	
	data TaskComplete		
	end TaskComplete;
	
	-- A CMASI automation request (with Identifier) that is sent by tasks.
	data TaskAutomationRequest		
	end TaskAutomationRequest;
	
	data implementation TaskAutomationRequest.i
	    subcomponents
	        --Identifier for tracking requests and responses
	        RequestID: data Integer_64;
	        --Original automation request without a unique identifier
	        OriginalRequest: data CMASI::AutomationRequest.i;
	        --If this boolean is true, then the resulting plans based on this
	        --automation request will not be directly implemented, for example,
	        --tasks should not expect the waypoints generated for this request to be
	        --active
	        SandBoxRequest: data Boolean;
	        --The initial states of entities used in planning. Note: if an
	        --eligible entity does not have a PlanningState, then it's most recent
	        --EntityState is used for plannning.
	        PlanningStates: data PlanningState.i {Data_Model::Data_Representation => Array;};
	end TaskAutomationRequest.i;

	--A CMASI automation response (with Identifier) that is sent back to tasks.	
	data TaskAutomationResponse		
	end TaskAutomationResponse;

	data implementation TaskAutomationResponse.i
	    subcomponents
	        --Identifier for tracking requests and responses. Must match RequestID
	        --from corresponding TaskAutomationRequest
	        ResponseID: data Integer_64;
	        --Original automation request without a unique identifier
	        OriginalResponse: data CMASI::AutomationResponse.i;
	end TaskAutomationResponse.i;
	
	--Start/end locations and headings and cost for implementing the task
	--from this configuration
	data TaskOption
	end TaskOption;
	
	data implementation TaskOption.i
	    subcomponents
	        --Task ID
	        TaskID: data Integer_64;
	        --ID for this option
	        OptionID: data Integer_64;
	        --Eligible entities for completing this option with identical cost to
	        --complete. If list is empty, then all vehicles are assumed to be
	        --eligible.
	        EligibleEntities: data Integer_64 {Data_Model::Data_Representation => Array;};
	        --Cost to complete option in terms of time (given in milliseconds)
	        Cost: data Integer_64;
	        --Start location entering the option
	        StartLocation: data CMASI::Location3D.i;
	        --Start heading entering the option
	        StartHeading: data Float_32;
	        --Ending location for this option
	        EndLocation: data CMASI::Location3D.i;
	        --Ending heading for this option
	        EndHeading: data Float_32;
	end TaskOption.i;

	--Summary of available options to complete this task
	data TaskPlanOptions		
	end TaskPlanOptions;
	
	data implementation TaskPlanOptions.i
	    subcomponents
	        --ID that matches this message with the appropriate unique automation
	        --request
	        CorrespondingAutomationRequestID: data Integer_64;
	        --Task ID
	        TaskID: data Integer_64;
	        --Process algebra string encoding all of the different options
	        Composition: data String;
	        --List of options
	        Options: data TaskOption.i {Data_Model::Data_Representation => Array;};
	end TaskPlanOptions.i;
		
	--Matrix of costs consisting of: (1) costs from initial vehicle
	--positions to all task options; and (2) costs from each task option to
	--every other task option
	data AssignmentCostMatrix		
	end AssignmentCostMatrix;
	
	data implementation AssignmentCostMatrix.i
	    subcomponents
	        --ID that matches this cost matrix with the appropriate unique
	        --automation request
	        CorrespondingAutomationRequestID: data Integer_64;
	        --Over-arching task relationship description (directly from automation
	        --request). A process algebra string with only task IDs.
	        TaskLevelRelationship: data String;
	        --List of all tasks that this cost matrix includes
	        TaskList: data Integer_64 {Data_Model::Data_Representation => Array;};
	        --Operating region that was used during matrix calculation
	        OperatingRegion: data Integer_64;
	        --Set of task-to-task timings for each requested vehicle
	        CostMatrix: data TaskOptionCost.i {Data_Model::Data_Representation => Array;};
	end AssignmentCostMatrix.i;
	
	--Single task option cost for a particular vehicle
	data TaskOptionCost
	end TaskOptionCost;
	
	data implementation TaskOptionCost.i
	    subcomponents
	        --Corresponding Vehicle ID
	        VehicleID: data Integer_64;
	        --Initial task ID (if zero, corresponds to current vehicle location)
	        IntialTaskID: data Integer_64;
	        --Initial task option
	        IntialTaskOption: data Integer_64;
	        --Destination task ID
	        DestinationTaskID: data Integer_64;
	        --Destination task option
	        DestinationTaskOption: data Integer_64;
	        --Timing corresponding to travel between ('InitialTask' using
	        --'InitialTaskOption') and ('DestinationTask' using
	        --'DestinationTaskOption'). If time is less than zero, no feasible path
	        --exists between tasks.
	        TimeToGo: data Integer_64;
	end TaskOptionCost.i;

	--Request to compute potential eligible sensor footprint for a single
	--vehicle at various GSDs and altitudes from available sensors on the
	--vehicle
	data FootprintRequest
	end FootprintRequest;
	
	data implementation FootprintRequest.i
	    subcomponents
	        --ID corresponding to this specific footprint request
	        FootprintRequestID: data Integer_64;
	        --Single vehicle to be considered for sensor request.
	        VehicleID: data Integer_64;
	        --Camera wavelength to be considered. If list is empty, planner should
	        --plan for all available sensors on each entity
	        EligibleWavelengths: data CMASI::WavelengthBand.i {Data_Model::Data_Representation => Array;};
	        --Desired ground sample distance for an eligible sensor. If list is
	        --empty, then footprint calculation uses the max ground sample distance
	        --for the specified altitude.
	        GroundSampleDistances: data Float_32 {Data_Model::Data_Representation => Array;};
	        --AGL Altitude to consider during sensor information calculation. If
	        --'AglAltitudes' list is empty, sensor planner should use nominal
	        --altitude from entity configurations
	        AglAltitudes: data Float_32 {Data_Model::Data_Representation => Array;};
	        --Desired camera elevation angles. If list is empty, then uses an
	        --optimal elevation angle for achieving max GSD
	        ElevationAngles: data Float_32 {Data_Model::Data_Representation => Array;};
	end FootprintRequest.i;

	--Request to compute a set of sensor footprints from possible vehicles
	--in the system
	data SensorFootprintRequests
	end SensorFootprintRequests;
	
	data implementation SensorFootprintRequests.i
	    subcomponents
	        --Request ID for correlating to response
	        RequestID: data Integer_64;
	        --Request ID for correlating to response
	        Footprints: data FootprintRequest.i {Data_Model::Data_Representation => Array;};
	end SensorFootprintRequests.i;
	
	data SensorFootprintResponse		
	end SensorFootprintResponse;
	
	--Description of a sensor footprint
	data SensorFootprint		
	end SensorFootprint;
	
	data implementation SensorFootprint.i
	    subcomponents
	        --Response ID that matches corresponding request ID. Note that
	        --multiple responses may be generated from a single request (such as
	        --multiple cameras which all meet the specification). Each response must
	        --contain the matching request ID in it's FootprintResponseID field.
	        FootprintResponseID: data Integer_64;
	        --Vehicle for which the footprint calculation applies
	        VehicleID: data Integer_64;
	        --Camera from which settings (such as zoom and field of view) were
	        --used in the footprint calculation
	        CameraID: data Integer_64;
	        --Gimbal from which parameters such as allowable steering angles were
	        --used in the footprint calculation
	        GimbalID: data Integer_64;
	        --The selected horizontal field of view of the camera necessary to get
	        --the reported footprint (equivalent to zoom)
	        HorizontalFOV: data Float_32;
	        --Altitude above ground level for which the footprint was calculated
	        AglAltitude: data Float_32;
	        --Commanded gimbal elevation to achieve sensor footprint
	        GimbalElevation: data Float_32;
	        --Aspect ratio (width/height) of the camera image used for footprint
	        --calculation. Note: combine with horizontal field of view to determine
	        --camera vertical field of view.
	        AspectRatio: data Float_32;
	        --Ground sample distance obtained with this sensor footprint
	        AchievedGSD: data Float_32;
	        --Sensor wavelength used applicable to this footprint calculation
	        CameraWavelength: data CMASI::WavelengthBand.i;
	        --Distance out front of the entity to the leading edge
	        HorizontalToLeadingEdge: data Float_32;
	        --Distance out front of the entity to the trailing edge
	        HorizontalToTrailingEdge: data Float_32;
	        --Distance out front of the entity to the center of the footprint
	        HorizontalToCenter: data Float_32;
	        --Width of the footprint at the vertical center
	        WidthCenter: data Float_32;
	        --At the prescribed settings (e.g. altitude, elevation angle, etc) the
	        --distance from the camera to the center of the footprint
	        SlantRangeToCenter: data Float_32;
	end SensorFootprint.i;
	
end UXTASK;