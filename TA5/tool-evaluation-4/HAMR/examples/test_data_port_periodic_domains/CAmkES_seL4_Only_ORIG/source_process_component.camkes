import <std_connector.camkes>;
import <global-connectors.camkes>;
import "components/source_thread_impl/source_thread_impl.camkes";
import "components/destination_thread_impl/destination_thread_impl.camkes";
import "components/Pacer/Pacer.camkes";

assembly {
  composition {
    component source_thread_impl source_thread_component;
    component destination_thread_impl destination_thread_component;

    connection seL4SharedData conn3(from source_thread_component.sb_write_port, to destination_thread_component.sb_read_port);

    // [2019/09/20:JCC] Pacer provides periodic pacing for other components
    component Pacer   pacer;
    connection seL4Notification paceEventSource(from pacer.period, to source_thread_component.sb_periodic_dispatch_notification);
    connection seL4Notification paceEventDestination(from pacer.period, to destination_thread_component.sb_periodic_dispatch_notification);

    // TickTock from pacer to itself. This only works if the pacer
    // thread is not in domain 0. If it is in domain 0, the signal
    // seems to happen immediatly rather than at domain
    // switch. Perhaps event signaling is handled in thread 0. 
    connection seL4Notification paceTickTock(from pacer.tick, to pacer.tock);
  }

  configuration {
    source_thread_component.write_port_access = "W";
    destination_thread_component.read_port_access = "R";

    // Allocate components to domains.
    // Leave any misc seL4 threads in domain 0 by default.
    // Place pacer in domain 1 by default, so it's always in the same place.

    pacer._domain                         = 1;
    source_thread_component._domain       = 2;
    destination_thread_component._domain  = 3;
  }
}
