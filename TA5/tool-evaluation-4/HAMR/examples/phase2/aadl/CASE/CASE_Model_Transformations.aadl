package CASE_Model_Transformations
public
	
	-- NOTE: This package is contributed by the Collins CASE TA2 plugin which is included in FMIDE.
	-- If you are running FMIDE (or OSATE with the Collins CASE TA2 plugin), then you will see various
	-- errors coming from this resource, which also will cause the HAMR plugin to fail.
    -- To prevent these errors, delete the CASE directory and its contents from the project.
    
    
    
    
	with Base_Types;
	with CASE_Properties;
	
	-- COMMUNICATIONS
	
	-- CASE message header
	data CASE_MsgHeader
	end CASE_MsgHeader;
	data implementation CASE_MsgHeader.Impl
		subcomponents
			src: data Base_Types::Integer_32;
			dst: data Base_Types::Integer_32;
			trusted: data Base_Types::Boolean;
			HMAC: data Base_Types::Boolean;
	end CASE_MsgHeader.Impl;

	-- CASE RF Message structure
	data CASE_RF_Msg
	end CASE_RF_Msg;
	
	data implementation CASE_RF_Msg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
			payload: data;
	end CASE_RF_Msg.Impl;
	
	-- UART Message structure
	data CASE_UART_Msg
	end CASE_UART_Msg;
	
	data implementation CASE_UART_Msg.Impl
		subcomponents
			crc: data Base_Types::Boolean;
--			message: data Base_Types::String;
	end CASE_UART_Msg.Impl;
	
	-- WIFI Message structure
	data CASE_WIFI_Msg
	end CASE_WIFI_Msg;
	
	data implementation CASE_WIFI_Msg.Impl
		subcomponents
			crc: data Base_Types::Boolean;
--			message: data Base_Types::String;
	end CASE_WIFI_Msg.Impl;
	
	-- ATTESTATION MANAGER
		
	-- This is the structure of an Attestation Request message
	-- that the Attestation Manager sends to the comm driver
	data CASE_AttestationRequestMsg
	end CASE_AttestationRequestMsg;

	data implementation CASE_AttestationRequestMsg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
	end CASE_AttestationRequestMsg.Impl;

	-- This is the structure of an Attestation Response message
	-- that the comm driver returns to the Attestation Manager
	-- when it gets a response from the Ground Station
	data CASE_AttestationResponseMsg
	end CASE_AttestationResponseMsg;

	data implementation CASE_AttestationResponseMsg.Impl
		subcomponents
			header: data CASE_MsgHeader.Impl;
			status: data Base_Types::Boolean;
	end CASE_AttestationResponseMsg.Impl;
	

	
	annex Resolute {**
		
		---------------------------
		-- MODEL TRANSFORMATIONS --
		---------------------------
		
		-- Strategy for proper insertion of a filter
		strategy add_filter(comp_context : component, filter : component, conn : connection, msg_type : data) <=
			** "Filter " filter " is properly added to component " comp_context **
			filter_exists(filter, comp_context, conn) and component_not_bypassed(filter, comp_context, msg_type) and component_implemented(filter)
			
		-- Strategy for proper insertion of attestation manager
		strategy add_attestation_manager(comm_driver : component, attestation_manager : component, attestation_gate : component) <=
			** "Attestation Manager added for communications driver " comm_driver **
			attestation_manager_exists(comm_driver, attestation_manager) and attestation_manager_not_bypassed(comm_driver, attestation_manager, attestation_gate) and component_implemented(attestation_manager)
		
		-- Strategy for proper insertion of virtualization
		strategy add_virtualization(bound_components : {component}, virtual_machine : component) <=
			** bound_components " contained in VM " virtual_machine **
			vm_bound_to_processor(virtual_machine) and components_bound_to_vm(bound_components, virtual_machine) and subcomponents_not_bound_to_other_processors(bound_components, virtual_machine)
		
		-- Strategy for proper insertion of a monitor
		strategy add_monitor(comp_context : component, monitor : component, alert_port : feature) <=
			** "Monitor " monitor " is properly added to " comp_context **
			component_exists(monitor, CASE_Properties::Monitoring) and alert_connected(monitor, alert_port) and independent_reset(monitor, comp_context) and component_implemented(monitor)

		-- Strategy for proper insertion of a monitor with a gate
		strategy add_monitor_gate(comp_context : component, monitor : component, alert_port : feature, gate_context : component, message_type : data) <=
			** "Monitor " monitor " is properly added to " comp_context **
			component_exists(monitor, CASE_Properties::Monitoring) and alert_connected(monitor, alert_port) and independent_reset(monitor, comp_context) and component_not_bypassed(monitor, gate_context, message_type) and component_implemented(monitor)

		-- Strategy claim for proper insertion of a switch
		strategy add_switch(comp_context : component, switch : component, message_type : data) <=
			** "Switch inserted after " comp_context **
			component_exists(switch, CASE_Properties::Gating) and component_not_bypassed(switch, comp_context, message_type) and component_implemented(switch)
		
		-- Strategy for proper transformation of model for seL4 build
		strategy sel4_transform(comp_context : component, transformed_component : component) <=
			** "Component " comp_context " transformed for seL4 build" **
			each_thread_in_separate_process(transformed_component)
			
		--------------------------
		-- PROJECT-LEVEL CLAIMS --
		--------------------------
		
		aadl_linter() <=
			** "Static model analysis was performed" **
			analysis("ToolCheck", "Resolint")
		
		----------------
		-- SUB CLAIMS --
		----------------
	
		-- This connects to evidence that AGREE was previously run on the current version of the design.
		agree_property_checked(c : component, property_id : string) <=
			** "AGREE properties passed" **
			AgreeLib.hasAgreeProperty(c, property_id) and analysis("AgreeCheck", type(parent(c)))
		
		-- Check to see if there is a filter immediately before 
		-- the component on the communication pathway.
		filter_exists(filter : component, comp_context : component, conn : connection) <=
			** "A CASE_Filter " filter " is connected to component " comp_context " by connection " conn **
			has_mitigation_type(filter, CASE_Properties::Filtering) and connected(filter, conn, comp_context)
						
		-- Check to see if the specified component exists
		component_exists(comp : component, mitigation_type : property) <=
			** comp " exists in the model" **
			has_mitigation_type(comp, mitigation_type) and exists(m : component) . m = comp
			

		-- Make sure there is no communication pathway that avoids the component
		component_not_bypassed(comp : component, comp_context : component, msg_type : data) <=
			** "Component " comp " cannot be bypassed" **
			let comp_srcs : {component} = get_filter_sources(comp_context, comp, msg_type); 
			let non_comp_srcs : {component} = get_non_filter_sources(comp_context, comp, msg_type); 
			size(intersect(comp_srcs, non_comp_srcs)) = 0
			
		-- This provides evidence that the high-assurance component was correctly generated for the appropriate os
	    -- and that the proof was emitted and checked.
	    component_implemented(comp : component) <=
		    ** "Component property implemented" **
			implementation_language_assurance(comp) and component_proof_checked(comp)
			
		-- Checks that a proof has been generated showing the component implementation
		-- matches the AGREE contract
		component_proof_checked(comp : component) <=
			** "Component proof checked" **
			is_seL4_component(comp) => analysis("ToolCheck", "SPLAT")
				
		has_mitigation_type(comp : component, mitigation_type : property) : bool =
			has_property(comp, mitigation_type) and property(comp, mitigation_type) = 100
			
		is_comm_driver(comp : component) : bool =
			has_property(comp, CASE_Properties::Comm_Driver) and property(comp, CASE_Properties::Comm_Driver) = true
					
		-- Returns the set of components that are ancestors of a target component through communication pathways that don't pass through a filter
		get_non_filter_sources(target : component, filter : component, msg_type : data) : {component} = 
			let srcs : {component} = {c for (conn : connections(target)) (c : source_component(conn)) | has_type(conn) and type(conn) = msg_type and not is_source_component(conn, filter) and not is_source_component(conn, target)}; 
			recursive_backwards_reach(srcs)
		
		-- Returns the set of components that are ancestors of the filter on a target component
		get_filter_sources(target : component, filter : component, msg_type : data) : {component} = 
			let srcs : {component} = {c for (conn : connections(target)) (c : source_component(conn)) | has_type(conn) and type(conn) = msg_type and is_source_component(conn, filter)};
			prev_reach(srcs)
		
		recursive_backwards_reach(curr : {component}) : {component} = 
			let prev : {component} = union(curr, prev_reach(curr)); 
			if prev = curr then 
				curr
			else 
				recursive_backwards_reach(prev)
		
		prev_reach(curr : {component}) : {component} = 
			{y for (x : curr) (y : backwards_reachable_components(x))}
		
		backwards_reachable_components(comp : component) : {component} = 
			{c for (conn : connections (comp)) (c : backwards_reachable_components_via_connection(comp, conn))}
		
		backwards_reachable_components_via_connection(comp : component, conn : connection) : {component} = 
			if is_port_connection(conn) then 
				if destination_component(conn) = comp and has_parent(comp) and not (source_component(conn) = parent(comp)) then 
					{source_component(conn)} 
				else 
					{} 
			else 
				{}
							
		-- Evidence that an attestation manager component exists for a given communication driver
		attestation_manager_exists(comm_driver : component, attestation_manager : component) <=
			** "An attestation manager on " comm_driver " exists" **
			-- check that the attestation manager only has attestation request/response connections to the comm driver
			is_comm_driver(comm_driver) and has_mitigation_type(attestation_manager, CASE_Properties::Attesting) 
--			and forall (conn : connections(attestation_manager)) . 
--				(has_type(conn) and name(type(conn)) = "CASE_AttestationRequestMsg.Impl") => destination_component(conn) = comm_driver and
--				(has_type(conn) and name(type(conn)) = "CASE_AttestationResponseMsg.Impl") => source_component(conn) = comm_driver
						
		-- Evidence that communication from the comm driver cannot bypass attestation manager
		attestation_manager_not_bypassed(comm_driver : component, attestation_manager : component, attestation_gate : component) <=
			** "Attestation Manager cannot be bypassed" **
			-- all outgoing connections from the comm driver to components inside the 
			-- parent of the comm driver connect to the attestation manager or attestation gate
			let out_conns : {connection} = {conn for (conn : connections(comm_driver)) | source_component(conn) = comm_driver and not (destination_component(conn) = parent(comm_driver))};
			forall(conn : out_conns) . (not is_software_component(destination_component(conn)) or destination_component(conn) = attestation_manager or destination_component(conn) = attestation_gate)

				
		-- Checks if the specified virtual processor is a CASE Virtualization and is bound to a processor
		vm_bound_to_processor(virtual_machine : component) <=
			** virtual_machine " is bound to a processor" **
			has_mitigation_type(virtual_machine, CASE_Properties::Isolating) and exists(p : processor) . is_bound_to(virtual_machine, p)
					
		-- Checks that bindings exist between specified virtualized components and virtual processor
		components_bound_to_vm(bound_components : {component}, virtual_machine : component) <=
			** "Components are bound to virtual processor " virtual_machine **
			forall (c : bound_components) . check_vm_binding(c, virtual_machine)
			
		-- Checks that the specified component is bound to the specified virtual processor
		check_vm_binding(c : component, virtual_machine : component) <=
			** "Component " c " is bound to virtual processor " virtual_machine **
			is_bound_to(c, virtual_machine)
		
		-- Checks that subcomponents of specified virtualized components are not bound to processors other than the 
		-- specified VM
		subcomponents_not_bound_to_other_processors(bound_components : {component}, virtual_machine : component) <=
			** "Subcomponents are not bound to other processors" **
			let subs : {component} = get_subcomponents(next_subcomponent(bound_components));
			forall (s : subs) . not exists (v : component) . (is_bound_to_processor(s, v) and not (v = virtual_machine))
			
		-- Get set of descendants
		get_subcomponents(curr : {component}) : {component} =
			let next : {component} = union(curr, next_subcomponent(curr));
			if next = curr then
				curr
			else
				get_subcomponents(next)
			
		next_subcomponent(curr : {component}) : {component} =
			{y for (x : curr) (y : subcomponents(x))}
			
		implementation_language_assurance(comp : component) <=
			** comp " implementation is appropriate for OS" **
			is_seL4_component(comp) => (has_property(comp, CASE_Properties::Component_Language) and property(comp, CASE_Properties::Component_Language) = "CakeML")
			
		-- checks that a component will run on seL4 by checking that the processors it is bound to have the seL4 OS property
		is_seL4_component(comp : component) : bool =
			let proc : {component} = {c for (c : component) | is_bound_to_processor(comp, c)};
			(size(proc) > 0) and forall (p : proc) . (has_property(p, CASE_Properties::OS) and property(p, CASE_Properties::OS) = "seL4")
		
		is_bound_to_processor(c : component, p : component) : bool =
			is_bound_to(c, p) and (is_processor(p) or is_virtual_processor(p))
						
		alert_connected(monitor : component, alert_port : feature) <=
			** "Monitor Alert port is connected" **
			contained(alert_port, monitor) and length(connections(alert_port)) > 0
						
		independent_reset(monitor : component, comp_context : component) <=
			** "Monitor reset port cannot be triggered by source of observed signal" **
			let reset_ancestors : {component} = {comp for (conn : connections(monitor)) (comp : recursive_backwards_reach({source_component(conn)})) | destination_component(conn) = monitor and name(destination(conn)) = "Reset"};
			length(intersect(reset_ancestors, {comp_context})) = 0
			
		is_software_component(comp : component) : bool =
			is_process(comp) or is_thread_group(comp) or is_thread(comp)
			
		each_thread_in_separate_process(root : component) <=
			** "Each thread is in a separate process" **
			let comps : {component} = get_subcomponents({root});
			forall (c : comps) . ((is_system(c) or is_thread(c) or is_process(c)) and is_process(c) => (length(subcomponents(c)) = 1 and is_thread(head(as_list(subcomponents(c))))))
		
	**};
	
end CASE_Model_Transformations;