----------------------------------------------------------------------
-- Copyright 2020 DARPA CASE
--
-- Micro example AADL to show single AADL dataport communications for
-- a periodic process running under the seL4 domain scheduler
----------------------------------------------------------------------
package test_event_data_port_periodic_domains
public
	with HAMR;
	with Base_Types;
	with CASE_Scheduling;

	thread emitter_t
		features
			write_port: out event data port Base_Types::Integer_8;
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Source_Text => ("behavior_code/components/emitter/src/emitter.c");
			Initialize_Entrypoint_Source_Text => "test_event_data_port_emitter_component_init";
			Compute_Entrypoint_Source_Text => "test_event_data_port_emitter_time_triggered_handler";
	end emitter_t;

	thread implementation emitter_t.impl
	end emitter_t.impl;

	process emitter_p
		features
			write_port: out event data port Base_Types::Integer_8;
		properties
			CASE_Scheduling::Domain => 2; -- pacer 1, vm source 2, vm dest 3, native dest 4
			HAMR::Component_Type => VIRTUAL_MACHINE;
	end emitter_p;

	-- process specifies boundary of spatial isolation
	process implementation emitter_p.impl
		subcomponents
			src_thread: thread emitter_t.impl;
		connections
			write_connection: port src_thread.write_port -> write_port;
	end emitter_p.impl;

	--------------------------------------------------------------------------
	thread consumer_t
		features
			read_port: in event data port Base_Types::Integer_8 {
				Compute_Entrypoint_Source_Text => "Periodic_thread_so_should_be_ignored";
			};
		properties
			Dispatch_Protocol => Periodic;
			Period => 1000ms;
			Compute_Execution_Time => 10ms .. 10ms;
			Source_Text => ("behavior_code/components/consumer/src/consumer.c");
			Initialize_Entrypoint_Source_Text => "test_event_data_port_consumer_component_init";
			Compute_Entrypoint_Source_Text => "test_event_data_port_consumer_time_triggered_handler";
	end consumer_t;

	thread implementation consumer_t.impl
	end consumer_t.impl;

	process consumer_p
		features
			read_port: in event data port Base_Types::Integer_8;
		properties
			CASE_Scheduling::Domain => 3; -- pacer 1, vm source 2, vm dest 3, native dest 4
			HAMR::Component_Type => VIRTUAL_MACHINE;
	end consumer_p;

	-- process specifies boundary of spatial isolation
	process implementation consumer_p.impl
		subcomponents
			dst_thread: thread consumer_t.impl;
		connections
			read_connection: port read_port -> dst_thread.read_port;
	end consumer_p.impl;

	--------------------------------------------------------------------------
	thread consumer_native_t
		features
			read_port: in event data port Base_Types::Integer_8 {
				Compute_Entrypoint_Source_Text => "test_event_data_port_consumer_event_handler";
			};
		properties
			Dispatch_Protocol => Sporadic;
			Source_Text => ("behavior_code/components/consumer_native/src/consumer.c");
			Initialize_Entrypoint_Source_Text => "test_event_data_port_consumer_component_init";
	end consumer_native_t;

	thread implementation consumer_native_t.impl
	end consumer_native_t.impl;

	process consumer_native_p
		features
			read_port: in event data port Base_Types::Integer_8;
		properties
			CASE_Scheduling::Domain => 4; -- pacer 1, vm source 2, vm dest 3, native dest 4
	end consumer_native_p;

	-- process specifies boundary of spatial isolation
	process implementation consumer_native_p.impl
		subcomponents
			dst_thread: thread consumer_native_t.impl;
		connections
			read_connection: port read_port -> dst_thread.read_port;
	end consumer_native_p.impl;

	--------------------------------------------------------------------------
	processor proc
	end proc;

	processor implementation proc.impl
		properties
			Frame_Period => 1000ms;
			Clock_Period => 2ms;
			CASE_Scheduling::Max_Domain => 4;
			CASE_Scheduling::Schedule_Source_Text => "behavior_code/kernel/domain_schedule.c";
	end proc.impl;

	--------------------------------------------------------------------------
	system top
	end top;

	system implementation top.impl
		subcomponents
			proc: processor proc.impl;
			src_vm_process: process emitter_p.impl;
			dst_vm_process: process consumer_p.impl;
			dst_native_process: process consumer_native_p.impl;
		connections
			data_interconnect: port src_vm_process.write_port -> dst_vm_process.read_port;
			data_native_interconnect: port src_vm_process.write_port -> dst_native_process.read_port;
		properties
			Actual_Processor_Binding => (reference (proc)) applies to src_vm_process;
			Actual_Processor_Binding => (reference (proc)) applies to dst_vm_process;
			Actual_Processor_Binding => (reference (proc)) applies to dst_native_process;
			HAMR::Platform => (seL4, seL4_Only);
	--annex resolute {**
	--	check CASE_Tools
	--**};
	end top.impl;

end test_event_data_port_periodic_domains;