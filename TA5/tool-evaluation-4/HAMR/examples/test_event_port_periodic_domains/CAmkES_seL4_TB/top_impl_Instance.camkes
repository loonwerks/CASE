// This file will be regenerated, do not edit

import <std_connector.camkes>;
import <global-connectors.camkes>;
import <TimeServer/TimeServer.camkes>;;
import "components/emitter_t_impl_src_process_src_thread/emitter_t_impl_src_process_src_thread.camkes";
import "components/sb_Monitors/sb_dst_thread_consume_Monitor/sb_dst_thread_consume_Monitor.camkes";
import "components/consumer_t_impl_dst_process_dst_thread/consumer_t_impl_dst_process_dst_thread.camkes";
import "components/dispatch_periodic/dispatch_periodic.camkes";

assembly {
  composition {
    component emitter_t_impl_src_process_src_thread src_process_src_thread;
    component sb_dst_thread_consume_Monitor sb_dst_thread_consume_monitor;
    component consumer_t_impl_dst_process_dst_thread dst_process_dst_thread;
    component dispatch_periodic dispatch_periodic_inst;
    component TimeServer time_server;

    connection seL4RPCCall conn1(from src_process_src_thread.sb_emit0, to sb_dst_thread_consume_monitor.mon_send);
    connection seL4RPCCall conn2(from dst_process_dst_thread.sb_consume, to sb_dst_thread_consume_monitor.mon_receive);
    connection seL4Notification conn3(from sb_dst_thread_consume_monitor.monsig, to dst_process_dst_thread.sb_consume_notification);
    connection seL4Notification conn4(from dispatch_periodic_inst.sb_src_process_src_thread_periodic_dispatch_notification, to src_process_src_thread.sb_periodic_dispatch_notification);
    connection seL4Notification conn5(from dispatch_periodic_inst.sb_dst_process_dst_thread_periodic_dispatch_notification, to dst_process_dst_thread.sb_periodic_dispatch_notification);
    connection seL4TimeServer conn6(from dispatch_periodic_inst.timer, to time_server.the_timer);
    connection seL4GlobalAsynchCallback conn7(from time_server.timer_notification, to dispatch_periodic_inst.timer_complete);
  }

  configuration {
    time_server.timers_per_client = 1;
    dispatch_periodic_inst.timer_attributes = 1;
    dispatch_periodic_inst.priority = 201;

  }
}
