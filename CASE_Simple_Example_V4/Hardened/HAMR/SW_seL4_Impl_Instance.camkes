// This file will be regenerated, do not edit

import <std_connector.camkes>;
import "components/AttestationTester_Impl_AttestationTester_AttestationTester/AttestationTester_Impl_AttestationTester_AttestationTester.camkes";
import "components/RadioDriver_Attestation_Impl_Radio_RadioDriver_Attestation/RadioDriver_Attestation_Impl_Radio_RadioDriver_Attestation.camkes";
import "components/Monitor_Impl_Monitor_Monitor/Monitor_Impl_Monitor_Monitor.camkes";
import "components/FlightController_Impl_FlightController_FlightController/FlightController_Impl_FlightController_FlightController.camkes";
import "components/AttestationManager_Impl_AttestationManager_AttestationManager/AttestationManager_Impl_AttestationManager_AttestationManager.camkes";
import "components/Filter_Impl_Filter_Filter/Filter_Impl_Filter_Filter.camkes";
import "components/FlightPlanner_Impl_FlightPlanner_FlightPlanner/FlightPlanner_Impl_FlightPlanner_FlightPlanner.camkes";
import "components/AttestationGate_Impl_AttestationGate_AttestationGate/AttestationGate_Impl_AttestationGate_AttestationGate.camkes";

assembly {
  composition {
    component AttestationTester_Impl_AttestationTester_AttestationTester AttestationTester_AttestationTester;
    component RadioDriver_Attestation_Impl_Radio_RadioDriver_Attestation Radio_RadioDriver_Attestation;
    component Monitor_Impl_Monitor_Monitor Monitor_Monitor;
    component FlightController_Impl_FlightController_FlightController FlightController_FlightController;
    component AttestationManager_Impl_AttestationManager_AttestationManager AttestationManager_AttestationManager;
    component Filter_Impl_Filter_Filter Filter_Filter;
    component FlightPlanner_Impl_FlightPlanner_FlightPlanner FlightPlanner_FlightPlanner;
    component AttestationGate_Impl_AttestationGate_AttestationGate AttestationGate_AttestationGate;

    connection seL4Notification conn1(from AttestationTester_AttestationTester.sb_AttestationResponse_1_notification, to Radio_RadioDriver_Attestation.sb_AttestationTesterResponse_notification);
    connection seL4SharedData conn2(from AttestationTester_AttestationTester.sb_AttestationResponse_queue_1, to Radio_RadioDriver_Attestation.sb_AttestationTesterResponse_queue);
    connection seL4Notification conn3(from Radio_RadioDriver_Attestation.sb_AttestationTesterRequest_1_notification, to AttestationTester_AttestationTester.sb_AttestationRequest_notification);
    connection seL4SharedData conn4(from Radio_RadioDriver_Attestation.sb_AttestationTesterRequest_queue_1, to AttestationTester_AttestationTester.sb_AttestationRequest_queue);
    connection seL4Notification conn5(from Radio_RadioDriver_Attestation.sb_MissionCommand_1_notification, to AttestationGate_AttestationGate.sb_MissionCommand_in_notification);
    connection seL4SharedData conn6(from Radio_RadioDriver_Attestation.sb_MissionCommand_queue_1, to AttestationGate_AttestationGate.sb_MissionCommand_in_queue);
    connection seL4Notification conn7(from Radio_RadioDriver_Attestation.sb_AttestationResponse_1_notification, to AttestationManager_AttestationManager.sb_AttestationResponse_notification);
    connection seL4SharedData conn8(from Radio_RadioDriver_Attestation.sb_AttestationResponse_queue_1, to AttestationManager_AttestationManager.sb_AttestationResponse_queue);
    connection seL4Notification conn9(from Monitor_Monitor.sb_FlightPlan_out_1_notification, to FlightController_FlightController.sb_FlightPlan_notification);
    connection seL4SharedData conn10(from Monitor_Monitor.sb_FlightPlan_out_queue_1, to FlightController_FlightController.sb_FlightPlan_queue);
    connection seL4Notification conn11(from Monitor_Monitor.sb_Alert, to FlightController_FlightController.sb_Alert);
    connection seL4SharedData conn12(from Monitor_Monitor.sb_Alert_counter, to FlightController_FlightController.sb_Alert_counter);
    connection seL4Notification conn13(from AttestationManager_AttestationManager.sb_AttestationRequest_1_notification, to Radio_RadioDriver_Attestation.sb_AttestationRequest_notification);
    connection seL4SharedData conn14(from AttestationManager_AttestationManager.sb_AttestationRequest_queue_1, to Radio_RadioDriver_Attestation.sb_AttestationRequest_queue);
    connection seL4Notification conn15(from AttestationManager_AttestationManager.sb_TrustedIds_1_notification, to AttestationGate_AttestationGate.sb_TrustedIds_notification);
    connection seL4SharedData conn16(from AttestationManager_AttestationManager.sb_TrustedIds_queue_1, to AttestationGate_AttestationGate.sb_TrustedIds_queue);
    connection seL4Notification conn17(from Filter_Filter.sb_Output_1_notification, to FlightPlanner_FlightPlanner.sb_MissionCommand_notification);
    connection seL4SharedData conn18(from Filter_Filter.sb_Output_queue_1, to FlightPlanner_FlightPlanner.sb_MissionCommand_queue);
    connection seL4Notification conn19(from FlightPlanner_FlightPlanner.sb_FlightPlan_1_notification, to Monitor_Monitor.sb_FlightPlan_in_notification);
    connection seL4SharedData conn20(from FlightPlanner_FlightPlanner.sb_FlightPlan_queue_1, to Monitor_Monitor.sb_FlightPlan_in_queue);
    connection seL4Notification conn21(from AttestationGate_AttestationGate.sb_MissionCommand_out_1_notification, to Filter_Filter.sb_Input_notification);
    connection seL4SharedData conn22(from AttestationGate_AttestationGate.sb_MissionCommand_out_queue_1, to Filter_Filter.sb_Input_queue);
  }

  configuration {
    AttestationTester_AttestationTester.sb_AttestationResponse_queue_1_access = "W";
    Radio_RadioDriver_Attestation.sb_AttestationTesterResponse_queue_access = "R";
    Radio_RadioDriver_Attestation.sb_AttestationTesterRequest_queue_1_access = "W";
    AttestationTester_AttestationTester.sb_AttestationRequest_queue_access = "R";
    Radio_RadioDriver_Attestation.sb_MissionCommand_queue_1_access = "W";
    AttestationGate_AttestationGate.sb_MissionCommand_in_queue_access = "R";
    Radio_RadioDriver_Attestation.sb_AttestationResponse_queue_1_access = "W";
    AttestationManager_AttestationManager.sb_AttestationResponse_queue_access = "R";
    Monitor_Monitor.sb_FlightPlan_out_queue_1_access = "W";
    FlightController_FlightController.sb_FlightPlan_queue_access = "R";
    Monitor_Monitor.sb_Alert_counter_access = "W";
    FlightController_FlightController.sb_Alert_counter_access = "R";
    AttestationManager_AttestationManager.sb_AttestationRequest_queue_1_access = "W";
    Radio_RadioDriver_Attestation.sb_AttestationRequest_queue_access = "R";
    AttestationManager_AttestationManager.sb_TrustedIds_queue_1_access = "W";
    AttestationGate_AttestationGate.sb_TrustedIds_queue_access = "R";
    Filter_Filter.sb_Output_queue_1_access = "W";
    FlightPlanner_FlightPlanner.sb_MissionCommand_queue_access = "R";
    FlightPlanner_FlightPlanner.sb_FlightPlan_queue_1_access = "W";
    Monitor_Monitor.sb_FlightPlan_in_queue_access = "R";
    AttestationGate_AttestationGate.sb_MissionCommand_out_queue_1_access = "W";
    Filter_Filter.sb_Input_queue_access = "R";

  }
}
