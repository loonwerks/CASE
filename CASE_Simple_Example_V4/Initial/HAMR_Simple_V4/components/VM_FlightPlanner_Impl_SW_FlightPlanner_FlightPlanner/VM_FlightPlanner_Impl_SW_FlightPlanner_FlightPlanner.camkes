component VM_FlightPlanner_Impl_SW_FlightPlanner_FlightPlanner {
  include <sb_types.h>;
  include <sb_queue_union_art_DataContent_1.h>;
  include <sb_queue_int8_t_1.h>;
  control;
  provides VMDTBPassthrough dtb;
  uses FileServerInterface fs;
  maybe uses Batch batch;
  maybe uses PutChar guest_putchar;
  maybe uses GetChar serial_getchar;
  maybe uses VirtQueueDev recv;
  maybe uses VirtQueueDrv send;
  maybe uses VMDTBPassthrough dtb_self;
  emits HaveNotification notification_ready_connector;
  emits ReceiveEvent sb_FlightPlan_1_notification;
  maybe consumes restart restart_event;
  consumes HaveNotification notification_ready;
  consumes ReceiveEvent sb_MissionCommand_notification;
  consumes Period_VM sb_pacer_period_notification;
  dataport sb_queue_union_art_DataContent_1_t sb_MissionCommand_queue;
  dataport sb_queue_union_art_DataContent_1_t sb_FlightPlan_queue_1;
  dataport sb_queue_int8_t_1_t sb_pacer_period_queue;
  has semaphore vm_sem;
  // expanding: VM_INIT_DEF()
  attribute int base_prio;
  attribute int num_vcpus = 1;
  attribute int num_extra_frame_caps;
  attribute int extra_frame_map_address;
  attribute {
    string linux_ram_base;
    string linux_ram_paddr_base;
    string linux_ram_size;
    string linux_ram_offset;
    string dtb_addr;
    string initrd_max_size;
    string initrd_addr;
  } linux_address_config;
  attribute {
    string linux_name = "linux";
    string dtb_name = "linux-dtb";
    string initrd_name = "linux-initrd";
    string linux_bootcmdline = "";
    string linux_stdout = "";
  } linux_image_config;
  // end of expansion: VM_INIT_DEF()
}
