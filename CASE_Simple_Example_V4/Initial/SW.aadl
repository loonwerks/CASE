package SW
public

	with Data_Model;
	with Base_Types;
	with CASE_Properties;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			Latitude: data Base_Types::Integer_32;
			Longitude: data Base_Types::Integer_32;
			Altitude: data Base_Types::Integer_32;
	end Coordinate.Impl;

	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end Map;

	data MapArray
		-- The MapArray is a structure that hold multiple Maps
		-- In this implementation, we fix the size of the map array to 5 maps
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Map));
			Data_Model::Dimension => (5);
	end MapArray;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			Map: data Map;
			Pattern: data FlightPattern;
	end Command.Impl;

	
	-- Message header
	data MsgHeader
	end MsgHeader;
	data implementation MsgHeader.Impl
		subcomponents
			src: data Base_Types::Unsigned_32;
			dst: data Base_Types::Unsigned_32;
			trusted: data Base_Types::Boolean;
			HMAC: data Base_Types::Boolean;
	end MsgHeader.Impl;

	-- RF Message structure
	data RF_Msg
	end RF_Msg;
	
	data implementation RF_Msg.Impl
		subcomponents
			header: data MsgHeader.Impl;
			payload: data Command.Impl;
	end RF_Msg.Impl;
	
	data Address
	end Address;
	
	data implementation Address.Impl
		subcomponents
			value: data Base_Types::Unsigned_32[4];
	end Address.Impl;

	data Mission
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		-- For this implementation, we fix the size of the Mission to 10 waypoints.
		-- Future versions will use an array
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
	end Mission;

	data MissionWindow
		-- The Mission Window is a list of waypoints that the Waypoint Manager assembles from the Mission.
		-- For this implementation, we fix the size of the Mission Window to 4 waypoints.
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
	end MissionWindow;


	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			Alert: in event port;
			MissionCommand: out event data port RF_Msg.Impl;
		properties
			CASE_Properties::Comm_Driver => true;
		annex agree {**
			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(MissionCommand);
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end RadioDriver.Impl;

	thread FlightPlanner
		-- The FlightPlanner is an abstraction for UxAS.
		-- It accepts a command message containing a map and flight pattern, and generates a mission.
		features
			FlightPlan: out event data port Mission;
			MissionCommand: in event data port RF_Msg.Impl;
		annex agree {**
			assume Req_Wellformed_MissionCommand "FlightPlanner component shall only receive well-formed messages" : WELL_FORMED_MESSAGE(MissionCommand);
			assume Req001_FlightPlanner "The Flight Planner shall receive a valid message from the Ground Station" : VALID_MESSAGE(MissionCommand);
			guarantee Req002_FlightPlanner "The Flight Planner shall generate a valid mission" : good_mission(FlightPlan);
		**};
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlightPlanner.Impl;

	thread FlyZoneDatabase
		-- The NoFlyZoneDatabase is a collection of polygons that represent areas on a map which the UAV should avoid.
		-- The database is populated at build-time and stored in memory.
		-- When provided a map of a region, it will return all no-fly areas within that region.
		features
			FlyZones: out data port MapArray;
	end FlyZoneDatabase;

	thread implementation FlyZoneDatabase.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlyZoneDatabase.Impl;

	thread WaypointManager
		-- The WaypointManager divides a mission into a small window of waypoints suitable for the FlightController.
		-- Because the FlightController can only process a small number of waypoints at a time, the WaypointManager
		-- creates these mission windows in response to the current position of the UAV, provided by the FlightController GPS.
		features
			FlightPlan: in event data port Mission;
			ReturnHome: in event port;
			MissionWindow: out event data port MissionWindow;
			Status: in event data port Coordinate.Impl;
		annex agree {**
			assume Req001_WaypointManager "The Waypoint Manager shall receive a well-formed mission" : good_mission(FlightPlan);
			guarantee Req002_WaypointManager "The Waypoint Manager shall output a well-formed mission window" : good_mission_window(MissionWindow);
		**};
	end WaypointManager;

	thread implementation WaypointManager.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end WaypointManager.Impl;


	thread UARTDriver
		-- The UARTDriver is the software that enables other SW components to communicate to other systems over the serial connection
		features
			Status: out event data port Coordinate.Impl;
			MissionWindow: in event data port MissionWindow;
		annex agree {**
			assume Req001_UARTDriver "Well-formed mission window" : good_mission_window(MissionWindow);
		**};
	end UARTDriver;

	thread implementation UARTDriver.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end UARTDriver.Impl;

	process SW
	end SW;

	process implementation SW.Impl
		subcomponents
			Radio: thread RadioDriver.Impl;
			FlightPlanner: thread FlightPlanner.Impl;
			WaypointManager: thread WaypointManager.Impl;
			UART: thread UARTDriver.Impl;
			FlyZones: thread FlyZoneDatabase.Impl;
		connections
			c1: port Radio.MissionCommand -> FlightPlanner.MissionCommand;
			c2: port FlightPlanner.FlightPlan -> WaypointManager.FlightPlan;
			c3: port WaypointManager.MissionWindow -> UART.MissionWindow;
			c4: port UART.status -> WaypointManager.Status;
	end SW.Impl;

	annex agree {**
		-- ID of this UAV
		const CASE_UAV_ID : int = 42;
		fun VALID_MESSAGE(msg : RF_Msg.Impl) : bool = (msg.header.src > 0 and msg.header.dst = CASE_UAV_ID and msg.header.HMAC);
		fun TRUSTED_MESSAGE(msg : RF_Msg.Impl) : bool = msg.header.trusted;
		fun WELL_FORMED_MESSAGE(msg : RF_Msg.Impl) : bool = good_command(msg.payload);
		-- These functions check the well-formedness of message structures
		fun good_coordinate(coord : Coordinate.Impl) : bool = coord.Latitude >= -90 and coord.Latitude <= 90 and coord.Longitude >= -180 and coord.Longitude <= 180 and coord.Altitude >= 0 and coord.Altitude <= 15000;
		fun good_map(map : Map) : bool = forall wp in map, good_coordinate(wp);
		fun good_pattern(pattern : FlightPattern) : bool = (pattern = enum(FlightPattern, ZigZag)) or (pattern = enum(FlightPattern, StraightLine)) or (pattern = enum(FlightPattern, Perimeter));
		fun good_command(cmd : Command.Impl) : bool = good_map(cmd.Map) and good_pattern(cmd.Pattern);
		fun good_mission(mission : Mission) : bool = forall wp in mission, good_coordinate(wp);
		fun good_mission_window(win : MissionWindow) : bool = forall wp in win, good_coordinate(wp);
	**};
	
end SW;