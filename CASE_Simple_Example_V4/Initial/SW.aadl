package SW
public

	with Data_Model;
	with Base_Types;
	with CASE_Properties;
	with HAMR;

	data Coordinate
	end Coordinate;

	data implementation Coordinate.Impl
		-- This is the structure to hold the lat/long/alt values of a coordinate
		subcomponents
			Latitude: data Base_Types::Integer_32;
			Longitude: data Base_Types::Integer_32;
			Altitude: data Base_Types::Integer_32;
		properties
			HAMR::Bit_Codec_Max_Size => 12 Bytes;
	end Coordinate.Impl;

	data Map
		-- The Map is a structure that contains a list of coordinates that encircle a
		-- region.  
		-- In this implementation, we fix the size of the map to 4 waypoints
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (4);
			HAMR::Bit_Codec_Max_Size => 48 Bytes;
	end Map;

	data FlightPattern
		-- The Flight Pattern is an enumeration that defines how the UAV will fly through the
		-- sensing region to conduct surveillance.
		properties
			Data_Model::Data_Representation => Enum;
			Data_Model::Enumerators => ("ZigZag", "StraightLine", "Perimeter");
	end FlightPattern;

	data implementation FlightPattern.Impl
		properties
			HAMR::Bit_Codec_Max_Size => 1 Bytes;
	end FlightPattern.Impl;

	data Command
	end Command;

	data implementation Command.Impl
		-- The Command structure contains data that the Ground Station passes to the UAV.
		-- It contains a message header, Map and Flight Pattern.
		subcomponents
			Map: data Map;
			Pattern: data FlightPattern;
		properties
			HAMR::Bit_Codec_Max_Size => 49 Bytes;
	end Command.Impl;

	-- Message header
	data MsgHeader
	end MsgHeader;

	data implementation MsgHeader.Impl
		subcomponents
			src: data Base_Types::Unsigned_32;
			dst: data Base_Types::Unsigned_32;
			trusted: data Base_Types::Boolean;
			HMAC: data Base_Types::Boolean;
		properties
			HAMR::Bit_Codec_Max_Size => 10 Bytes;
	end MsgHeader.Impl;

	-- RF Message structure
	data RF_Msg
	end RF_Msg;

	data implementation RF_Msg.Impl
		subcomponents
			header: data MsgHeader.Impl;
			payload: data Command.Impl;
		properties
			HAMR::Bit_Codec_Max_Size => 59 Bytes;
	end RF_Msg.Impl;
	
	-- This is the structure of an Attestation Request message
	-- that the Attestation Manager sends to the comm driver
	data AttestationRequestMsg
	end AttestationRequestMsg;

	data implementation AttestationRequestMsg.Impl
		subcomponents
			header: data MsgHeader.Impl;
		properties
			HAMR::Bit_Codec_Max_Size => 10 Bytes;
	end AttestationRequestMsg.Impl;

	-- This is the structure of an Attestation Response message
	-- that the comm driver returns to the Attestation Manager
	-- when it gets a response from the Ground Station
	data AttestationResponseMsg
	end AttestationResponseMsg;

	data implementation AttestationResponseMsg.Impl
		subcomponents
			header: data MsgHeader.Impl;
			status: data Base_Types::Boolean;
		properties
			HAMR::Bit_Codec_Max_Size => 11 Bytes;
	end AttestationResponseMsg.Impl;

	data UnsignedIntArray
	end UnsignedIntArray;

	data implementation UnsignedIntArray.Impl
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Base_Types::Unsigned_32));
			Data_Model::Dimension => (4);
			HAMR::Bit_Codec_Max_Size => 16 Bytes;
	end UnsignedIntArray.Impl;

	data Address
	end Address;

	data implementation Address.Impl
		subcomponents
			value: data UnsignedIntArray.Impl;
		properties
			HAMR::Bit_Codec_Max_Size => 16 Bytes;
	end Address.Impl;


	data Mission
		-- The Mission is a list of waypoints that is generated by the Flight Planner based on a
		-- Map and Flight Pattern.
		properties
			Data_Model::Data_Representation => Array;
			Data_Model::Base_Type => (classifier (Coordinate.Impl));
			Data_Model::Dimension => (10);
			HAMR::Bit_Codec_Max_Size => 120 Bytes;
	end Mission;

	thread RadioDriver
		-- The RadioDriver is the software that enables other SW components to communicate to other systems over RF
		features
			Alert: in event port;
			MissionCommand: out event data port RF_Msg.Impl;
		properties
			CASE_Properties::Comm_Driver => true;
		annex agree {**
			guarantee Req001_RadioDriver "Only valid command messages shall be forwarded to message destination components" : VALID_MESSAGE(MissionCommand);
		**};
	end RadioDriver;

	thread implementation RadioDriver.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end RadioDriver.Impl;

	thread FlightPlanner
		-- The FlightPlanner accepts a command message containing a map and flight pattern, and generates a mission.
		features
			MissionCommand: in event data port RF_Msg.Impl;
			FlightPlan: out event data port Mission;
		annex agree {**
			assume Req001_FlightPlanner "The Flight Planner shall receive a valid message from the Ground Station" : VALID_MESSAGE(MissionCommand);
			guarantee Req002_FlightPlanner "The Flight Planner shall generate a valid mission" : good_mission(FlightPlan);
		**};
	end FlightPlanner;

	thread implementation FlightPlanner.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlightPlanner.Impl;

	thread FlightController
		-- The FlightController is the software that flies the UAV
		features
			FlightPlan: in event data port Mission;
		annex agree {**
			assume Req001_FlightController "Well-formed mission window" : good_mission(FlightPlan);
		**};
	end FlightController;

	thread implementation FlightController.Impl
		properties
			Dispatch_Protocol => Sporadic;
	end FlightController.Impl;

	process SW
	end SW;

	process implementation SW.Impl
		subcomponents
			Radio: thread RadioDriver.Impl;
			FlightPlanner: thread FlightPlanner.Impl;
			FlightController: thread FlightController.Impl;
		connections
			c1: port Radio.MissionCommand -> FlightPlanner.MissionCommand;
			c2: port FlightPlanner.FlightPlan -> FlightController.FlightPlan;
	end SW.Impl;

	annex agree {**
		-- ID of this UAV
		const CASE_UAV_ID : int = 42;
		fun VALID_MESSAGE(msg : RF_Msg.Impl) : bool = (msg.header.src > 0 and msg.header.dst = CASE_UAV_ID and msg.header.HMAC);
		fun TRUSTED_MESSAGE(msg : RF_Msg.Impl) : bool = msg.header.trusted;
		fun WELL_FORMED_MESSAGE(msg : RF_Msg.Impl) : bool = good_command(msg.payload);
		-- These functions check the well-formedness of message structures
		fun good_coordinate(coord : Coordinate.Impl) : bool = coord.Latitude >= -90 and coord.Latitude <= 90 and coord.Longitude >= -180 and coord.Longitude <= 180 and coord.Altitude >= 0 and coord.Altitude <= 15000;
		fun good_map(map : Map) : bool = forall wp in map, good_coordinate(wp);
		fun good_pattern(pattern : FlightPattern) : bool = (pattern = enum(FlightPattern, ZigZag)) or (pattern = enum(FlightPattern, StraightLine)) or (pattern = enum(FlightPattern, Perimeter));
		fun good_command(cmd : Command.Impl) : bool = good_map(cmd.Map) and good_pattern(cmd.Pattern);
		fun good_mission(mission : Mission) : bool = forall wp in mission, good_coordinate(wp);
	**};
	
end SW;